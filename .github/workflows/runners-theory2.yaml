1Ô∏è‚É£ Runner Labels and Tagging
--------

What are Runner Labels?

1. Labels are tags or keywords assigned to self-hosted runners.

2. They help categorize and filter runners when choosing which runner should execute a job.

You can use labels to indicate things like:

1. OS (linux, windows, macos)

2. Hardware (gpu, high-memory)

3. Software installed (docker, nodejs)

4. Location (us-east, eu-west)

5. Any custom category relevant to your organization

---

Why Use Labels?

* GitHub Actions workflows can specify labels in the runs-on field.

* This ensures jobs run only on runners matching those labels.

* Helps optimize resource usage and control workload distribution.

---
Default vs Custom Labels

| Type        | Description                                 | Example Labels                               |
| ----------- | ------------------------------------------- | -------------------------------------------- |
| **Default** | Automatically assigned by GitHub to runners | `self-hosted`, `linux`, `windows`, `macos`   |
| **Custom**  | Manually added by user during runner setup  | `gpu`, `high-mem`, `build-server`, `us-east` |


* Every self-hosted runner has the default label: self-hosted.

* OS-specific default labels (e.g., linux, windows) are also added automatically.

---
How to Add Custom Labels?

At registration time:
When running ./config.sh, you can specify labels:

./config.sh --url https://github.com/your-org/your-repo --token RUNNER_TOKEN --labels label1,label2,label3

Example:

./config.sh --url https://github.com/my-org/my-repo --token ABC123 --labels gpu,high-memory,us-east


---

When to Use Labels?

1. When you have multiple runners with different capabilities

2. You want specific jobs to run on specific machines (e.g., GPU for ML jobs)

3. You want geographic control (e.g., run jobs only on US data centers)

---

‚úÖ Default labels always include:

| Label                         | Description                          |
| ----------------------------- | ------------------------------------ |
| `self-hosted`                 | Identifies the runner as self-hosted |
| `linux` / `windows` / `macos` | Based on OS of runner                |
| `x64`, `arm64`                | Based on architecture                |

---
üìå Example: If you're registering a Linux runner on x64 CPU, these labels will be assigned by default:

[self-hosted, linux, x64]

---
üîπ Custom Labels

Custom labels are user-defined tags that you add to describe the runner's custom capabilities.

| Purpose                     | Example Label        |
| --------------------------- | -------------------- |
| Tag runner with GPU         | `gpu`                |
| Tag runner for build jobs   | `build`              |
| Tag runner for specific app | `android`            |
| Tag based on region         | `us-east`, `eu-west` |
| Tag by environment          | `staging`, `prod`    |


---
‚ö†Ô∏è Important Notes

* Labels in runs-on are ANDed together:

* runs-on: [self-hosted, linux, gpu] means: ‚Äúmust match all labels‚Äù

* If no runner matches, the workflow does not run

* You can‚Äôt assign labels in workflows ‚Äî they are defined on the runner

| Rule                       | Description                                                 |
| -------------------------- | ----------------------------------------------------------- |
| AND logic                  | All labels must be matched by the runner                    |
| No OR logic                | GitHub Actions does not support `runs-on: [gpu OR windows]` |
| Must include `self-hosted` | Unless it's a GitHub-hosted runner                          |
| Case-insensitive           | Labels like `Linux` and `linux` are treated the same        |


---

RUNNERS RUN AS SERVICE 

---

| Command                               | Purpose            |
| ------------------------------------- | ------------------ |
| `sudo ./svc.sh status`                | Show runner status |
| `sudo ./svc.sh start`                 | Start the service  |
| `sudo ./svc.sh stop`                  | Stop the service   |
| `sudo ./svc.sh uninstall`             | Remove the service |
| `sudo journalctl -u actions.runner.*` | View logs          |


1. Install the runner as a system service:

sudo ./svc.sh install


2. Start the service:

sudo ./svc.sh start


3. (Optional) Enable the runner to start on boot:

sudo systemctl enable actions.runner.<repo-or-org>.<runner-name>.service

Example:

sudo systemctl status actions.runner.GH-Actions-Learning-ghlearning.rs1.service

4. You can find the exact service name by running:

sudo systemctl list-units | grep actions


-----------------------
Secure Communication Between GitHub and Self-Hosted Runner
----------------------

When you register a self-hosted runner, it's essentially a persistent agent that connects to GitHub and listens for jobs.

To ensure this connection is secure, GitHub enforces a secure communication model using:

1. Outbound HTTPS (port 443) to GitHub

2. Short-lived registration tokens

3. Runner authentication using ephemeral session tokens

4. TLS encryption for all communication

5. Signed job payloads

---------
Communication Flow
---------

üîÅ Step-by-Step Overview:

1. Runner Registration

You run:

./config.sh --url <repo/org> --token <registration-token>

This registers your runner using a short-lived token (valid for 1 hour)

The runner receives:

a. Repo/org metadata

b. Runner ID

c. A JWT token for authentication

--

2. Runner Connects to GitHub

The runner launches and opens a secure WebSocket over HTTPS

Connects to:

https://github.com/_services/internal/actions

--

3. Job Dispatch

GitHub digitally signs the job payload using a private key

The runner verifies the signature using a public key baked into the runner binary

Only then does it execute the job

--

4. Logs and Artifacts

Uploaded to GitHub over HTTPS with temporary session tokens 

---
 Key Security Mechanisms

 | Mechanism               | What It Does                                               |
| ----------------------- | ---------------------------------------------------------- |
| **HTTPS & TLS**         | Ensures all traffic between GitHub and runner is encrypted |
| **Short-lived tokens**  | Prevents reuse of stolen registration tokens               |
| **JWT Authentication**  | Runners use a secure token to authenticate with GitHub     |
| **Signed job payloads** | Prevents man-in-the-middle injection or tampering          |
| **WebSocket channel**   | Allows GitHub to push jobs securely to the runner          |


---

üö´ No Inbound Traffic or Firewall Holes Needed

‚úÖ Self-hosted runners initiate the connection to GitHub.

üîí This means:

No ports need to be opened on your server

Runner only needs outbound HTTPS (port 443)

---

üß™ Optional Hardening for Sensitive Environments

| Option                                      | Description                                                          |
| ------------------------------------------- | -------------------------------------------------------------------- |
| ‚úÖ Run runner on an **isolated VM**          | Prevent lateral movement if runner is compromised                    |
| üîí Use **firewall rules**                   | Limit outbound domains strictly to GitHub                            |
| üîÑ Rotate runners frequently                | Use ephemeral or containerized runners                               |
| üßç Use **dedicated GitHub App**             | For org-level runner auth (advanced setup)                           |
| üîë Limit access to **`config.sh`/`svc.sh`** | These scripts contain secrets ‚Äî restrict them using file permissions |


---
üß∞ Tip: Run as a Least-Privileged User
---

When setting up the runner, avoid running it as root (unless needed).

# Create a new system user
sudo useradd -m -s /bin/bash github-runner

# Give only the necessary permissions
sudo usermod -aG docker github-runner     # If using Docker


---
‚úÖ Summary

| Feature                | How GitHub Secures It                   |
| ---------------------- | --------------------------------------- |
| Communication          | HTTPS (TLS 1.2+)                        |
| Runner Auth            | JWT via short-lived registration token  |
| Job Payload Validation | Signed + verified                       |
| Firewall               | Only needs outbound 443                 |
| Monitoring             | `_diag/`, `journalctl`, GitHub UI       |
| Hardening              | Least-privileged user, network lockdown |

--------------------------
--------------------------
üìÑ Runner Logs & Debugging Failed Jobs in GitHub Actions (Self-Hosted)
-------------------------
-------------------------

When you use a self-hosted runner, logs are generated in two main places:

| Log Location              | Purpose                              |
| ------------------------- | ------------------------------------ |
| ‚úÖ GitHub Actions Job Logs | Workflow step logs (in GitHub UI)    |
| ‚úÖ Runner System Logs      | Diagnostic logs (in `_diag/` folder) |


Tips for Debugging Workflow Failures

 | Strategy                           | Example                                         |
| ---------------------------------- | ----------------------------------------------- |
| ‚úÖ Enable debug logging             | Set `ACTIONS_STEP_DEBUG: true`                  |
| üì¶ Use `run: set -x` in bash steps | Shows each command as it's run                  |
| üì§ Print environment info          | `run: env` or `run: printenv`                   |
| üß™ Use `continue-on-error: true`   | Temporarily skip failure to investigate further |

--- 

üîß Enable Debug Logs for a Workflow

Add a secret to your repo:

Go to Settings ‚Üí Secrets ‚Üí Actions

Add:

1. ACTIONS_RUNNER_DEBUG = true (Runner internals)

2. ACTIONS_STEP_DEBUG = true (Each step)

Then re-run the workflow.

---

2. Self-Hosted Runner Logs (_diag/ folder)

| File/Log Name  | What It Contains                                      |
| -------------- | ----------------------------------------------------- |
| `Runner_*.log` | General runner activity (startup, shutdown, errors)   |
| `Worker_*.log` | Job-specific execution details                        |
| `Diag.log`     | Diagnostics of runner components (connectivity, etc.) |

--
üîπ 1. Runner_*.log

| Characteristic    | Value                                                |
| ----------------- | ---------------------------------------------------- |
| Format            | `Runner_<timestamp>-utc.log`                         |
| Purpose           | Logs global actions: runner start/stop, service init |
| Typical Size      | Small to medium                                      |
| When It‚Äôs Written | Continuously while runner is active                  |

üìÑ What It Captures:

Runner startup and shutdown events

Config load & service status

Heartbeats / connection to GitHub

Token refresh and WebSocket status

Any crash or internal failure

Errors like: Runner failed to start, Runner could not reach GitHub, etc.

--

üîπ 2. Worker_*.log

| Characteristic    | Value                                            |
| ----------------- | ------------------------------------------------ |
| Format            | `Worker_<timestamp>-utc.log`                     |
| Purpose           | Logs job execution details for each workflow run |
| One File per Job? | Yes (if enabled)                                 |
| Typical Size      | Can be large for long/complex jobs               |

üìÑ What It Captures:

Job metadata received from GitHub (labels, repo info)

Step execution (shell commands, Docker runs, etc.)

Download of actions and artifacts

Runtime env info (OS, path, shell)

Error stack traces

Return codes for each step

--
üîπ 3. Diag.log

| Characteristic    | Value                                        |
| ----------------- | -------------------------------------------- |
| File Name         | Always `Diag.log`                            |
| Purpose           | Contains runner setup + troubleshooting info |
| When It‚Äôs Updated | At setup/config time, or on manual run       |


üìÑ What It Captures:

Diagnostic commands and test results

Network check status (e.g., GitHub connectivity test)

Proxy info (if configured)

Environment validation

Diagnostic tool results (runner version, platform, OS info)

| Log File       | Key Purpose                              | Look Here For...                                        |
| -------------- | ---------------------------------------- | ------------------------------------------------------- |
| `Runner_*.log` | Global runner events (startup, shutdown) | Runner offline, cannot start, token/auth errors         |
| `Worker_*.log` | Job execution details                    | Step failure, command errors, exit codes, tool issues   |
| `Diag.log`     | System and network diagnostics           | Connectivity issues, platform info, GitHub reachability |



---
üõ†Ô∏è Common Issues and How to Debug

| Issue Type                     | Suggested Debug Steps                               |
| ------------------------------ | --------------------------------------------------- |
| Job fails with "no runner"     | Check labels in `runs-on`; runner status in GitHub  |
| Step fails with env issues     | Print `env`; check `.bashrc` or `/etc/environment`  |
| Checkout fails                 | Check Git version, permissions, token setup         |
| Docker permission errors       | Ensure runner user is in the `docker` group         |
| Runner not showing as "online" | Check internet, firewall, `_diag/` and `journalctl` |
| Job stuck in queue             | Runner offline? Wrong label? No capacity?           |


| Log Type                   | Location                                  | Use Case                             |
| -------------------------- | ----------------------------------------- | ------------------------------------ |
| Actions UI Logs            | GitHub web interface                      | Step-level output and errors         |
| Debug Logs (`ACTIONS_*`)   | GitHub UI (with secrets set)              | More verbose runner/step debugging   |
| Runner Logs (`_diag/`)     | Local runner directory                    | Service, connectivity, job internals |
| System Logs (`journalctl`) | System-level logs if running as a service | Crashes, service restarts, etc.      |


---------------------------------
--------------------------------
Organizational vs Repository Level Runners
---------------------------------
--------------------------------

GitHub allows self-hosted runners to be registered at two levels:

| Type                   | Scope                                          | Visible To                       |
| ---------------------- | ---------------------------------------------- | -------------------------------- |
| **Repository-level**   | Only for a specific repository                 | Only that repo                   |
| **Organization-level** | Shared across multiple repositories in the org | Any repo in the org (if allowed) |

üîê Visibility & Access Control

| Feature                          | Repository-Level | Organization-Level              |
| -------------------------------- | ---------------- | ------------------------------- |
| Visible to other repos?          | ‚ùå No             | ‚úÖ Yes (if shared)               |
| Set sharing policies?            | ‚ùå No             | ‚úÖ Yes                           |
| Isolated for sensitive projects? | ‚úÖ Yes            | ‚ùå No (unless access restricted) |


‚úÖ When to Use Which?

| Use Case                               | Recommended Runner Type      |
| -------------------------------------- | ---------------------------- |
| Secure, isolated CI for private repo   | Repository-level             |
| Shared infra across many repos         | Organization-level           |
| Different hardware for different teams | Org-level with label routing |
| Per-team billing/resource tracking     | Repository-level             |


| Feature                  | Repository-Level Runner                  | Organization-Level Runner             |
| ------------------------ | ---------------------------------------- | ------------------------------------- |
| **Scope**                | Only usable by a specific repository     | Usable by **any** repo within the org |
| **Setup Location**       | `Settings ‚Üí Actions ‚Üí Runners` in a repo | `Org Settings ‚Üí Actions ‚Üí Runners`    |
| **Use Case**             | Small scale or isolated pipelines        | Shared infra across teams/repos       |
| **Cost Efficiency**      | ‚ùå Less efficient (runner per repo)       | ‚úÖ Highly efficient (shared runners)   |
| **Admin Access Needed**  | Repo admin                               | Org owner or admin                    |
| **Security & Isolation** | Tighter (repo-scoped)                    | Needs label/permissions for control   |


‚úÖ Table

| Feature                 | Repository-Level        | Organization-Level           |
| ----------------------- | ----------------------- | ---------------------------- |
| Scope                   | One repository          | Multiple repositories        |
| Runner registration URL | `github.com/org/repo`   | `github.com/org`             |
| Token type              | Repo registration token | Org registration token       |
| Access control          | None                    | Fine-grained access (groups) |
| Ideal use case          | Security, isolation     | Sharing, scalability         |


