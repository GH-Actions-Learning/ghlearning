1. What is the steps Context?

The steps context allows you to access outputs and status of previous steps within the same job.

Each step in a job can produce outputs (named data), and the steps context is the way to refer to those outputs in subsequent steps.

------------

2. Why is steps Context Important?

It enables data sharing between steps.

You can make your workflow dynamic by using results from earlier steps.

Useful for conditional logic based on previous step results.

Enables step chaining, i.e., a later step depending on data generated by an earlier step.

-------------

3. Basic Syntax of steps Context

${{ steps.<step_id>.outputs.<output_name> }}
<step_id>: The id you assign to a step in the workflow.

<output_name>: The named output that the step produces.

---------

| Property                                | Description                                    | Example Usage                            |
| --------------------------------------- | ---------------------------------------------- | ---------------------------------------- |
| `steps.<step_id>.outputs.<output_name>` | Access output set by the step                  | `${{ steps.build.outputs.result }}`      |
| `steps.<step_id>.conclusion`            | Final conclusion of the step (`success`, etc.) | `if: steps.test.conclusion == 'failure'` |
| `steps.<step_id>.status`                | Current status of the step                     | `if: steps.deploy.status == 'success'`   |


steps.<id>.conclusion

What it is:

The final outcome of a step after it finishes running.

Possible values:

success, failure, skipped, cancelled, etc.

When to use:

Use this to check if a step passed or failed, especially in if: conditions for subsequent steps.

Example:

if: steps.build.conclusion == 'success'

Reliability:

Always set after the step completes. Preferred for decision-making.

steps.<id>.status

What it is:

The current state of the step at the time the workflow is evaluated.

Possible values:

queued, in_progress, completed (sometimes can be empty)

When to use:

Rarely needed for most workflows. Not recommended for conditional logic since it may not always be set or reliable.

Example:

if: steps.build.status == 'completed'

Reliability:

Can be empty or misleading, especially after the step finishes. Not recommended for critical logic.

Summary Table

| Use Case                   | Use conclusion? | Use status? |
| -------------------------- | --------------- | ----------- |
| Check if a step succeeded  | ✅               | ❌           |
| Check if a step failed     | ✅               | ❌           |
| Check if a step is running | ❌               | ✅           |
| Reliable conditional logic | ✅               | ❌           |
