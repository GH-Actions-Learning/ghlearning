1. What is the steps Context?

The steps context allows you to access outputs and status of previous steps within the same job.

Each step in a job can produce outputs (named data), and the steps context is the way to refer to those outputs in subsequent steps.

------------

2. Why is steps Context Important?

It enables data sharing between steps.

You can make your workflow dynamic by using results from earlier steps.

Useful for conditional logic based on previous step results.

Enables step chaining, i.e., a later step depending on data generated by an earlier step.

-------------

3. Basic Syntax of steps Context

${{ steps.<step_id>.outputs.<output_name> }}
<step_id>: The id you assign to a step in the workflow.

<output_name>: The named output that the step produces.

---------

‚úÖ What Are conclusion and outcome in steps ?

Both are part of GitHub‚Äôs execution context ‚Äî values available in expressions like ${{ steps.<step_id>.conclusion }} or ${{ steps.<step_id>.outcome }}.

| Term         | Meaning                                                                             | Value Examples                                                                          |
| ------------ | ----------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
| `outcome`    | Shows the **raw execution result** of a step                                        | `success`, `failure`, `cancelled`, `skipped`                                            |
| `conclusion` | Shows the **final logical result**, considering `continue-on-error` and other logic | `success`, `failure`, `skipped`, `cancelled`, `neutral`, `timed_out`, `action_required` |

-------
‚öôÔ∏è 1. outcome ‚Üí Raw Execution Status

This always shows what actually happened when the step ran.

It does not change even if continue-on-error: true.

üî∏ Used when you care about whether the step physically failed or succeeded, regardless of error handling.

--------
‚öôÔ∏è 2. conclusion ‚Üí Final Logical Result

This may show success even if the step failed, if continue-on-error: true was set.

It reflects what the system considers as the outcome, after handling.

üî∏ Used when you want to evaluate whether the step was treated as failed or not in the context of the workflow.

üß™ Real Example Comparing Both

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Step that fails but is allowed
        id: fail
        run: exit 1
        continue-on-error: true

      - name: Print outcome and conclusion
        run: |
          echo "Outcome: ${{ steps.fail.outcome }}"
          echo "Conclusion: ${{ steps.fail.conclusion }}"

üü° Output:
Outcome: failure
Conclusion: success

üîπ outcome is failure: because the step command (exit 1) failed.

üîπ conclusion is success: because we told GitHub Actions to continue anyway.

---------

‚úÖ When to Use conclusion vs outcome
| Use Case                                            | Use                             |
| --------------------------------------------------- | ------------------------------- |
| Custom decision-making based on **real failure**    | `outcome`                       |
| Flow logic that respects `continue-on-error`        | `conclusion`                    |
| Skipping or branching steps based on a soft failure | `conclusion`                    |
| Logging and diagnostics                             | `outcome` (to show real result) |


‚úÖ Example: Retry on Failure But Continue on Logical Success

jobs:
  retry-example:
    runs-on: ubuntu-latest
    steps:
      - name: Maybe fails
        id: flaky
        run: |
          echo "Running a flaky test"
          exit $((RANDOM % 2))
        continue-on-error: true

      - name: Retry if outcome is failure
        if: ${{ steps.flaky.outcome == 'failure' }}
        run: echo "‚ö†Ô∏è Flaky test failed. Retrying..."

      - name: Skip if final conclusion is success
        if: ${{ steps.flaky.conclusion == 'success' }}
        run: echo "‚úÖ No retry needed!"

üßæ Conclusion

| Attribute    | What it tells you                                 | When to use it                         |
| ------------ | ------------------------------------------------- | -------------------------------------- |
| `outcome`    | Whether the step‚Äôs command failed or succeeded    | For raw status checks, debug, retries  |
| `conclusion` | Whether GitHub **considered** it failed/succeeded | For logical flow control, continuation |
