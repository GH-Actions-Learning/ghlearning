The strategy context provides runtime metadata about the matrix execution strategy for the current job. It's only available in jobs that use a strategy block.

‚úÖ Available Properties

| Property                | Type      | Description                                      |
| ----------------------- | --------- | ------------------------------------------------ |
| `strategy.fail-fast`    | `boolean` | Whether failing one matrix job cancels the rest. |
| `strategy.job-index`    | `number`  | Zero-based index of the current matrix job.      |
| `strategy.job-total`    | `number`  | Total number of matrix jobs (non-zero-based).    |
| `strategy.max-parallel` | `number`  | Max parallel jobs allowed.                       |


üîπ echo "Fail-fast: ${{ strategy.fail-fast }}"

Explanation:

This prints the value of fail-fast, which is defined under your job‚Äôs strategy.

It will print either true or false.

üìå In your case:

strategy:

  fail-fast: true

‚û°Ô∏è Output:

Fail-fast: true

What fail-fast does:

If one matrix job fails and fail-fast is set to true, all other in-progress or pending matrix jobs will be cancelled immediately.

If set to false, all matrix jobs will run to completion even if one fails.

| Scenario                         | Why `fail-fast` helps                   |
| -------------------------------- | --------------------------------------- |
| You run a 20-job test matrix     | Save time if one version fails early    |
| Long-running builds or CI checks | Don't waste resources on doomed builds  |
| Critical deploy matrix           | Stop rollout as soon as a config breaks |


------------------

üîπ echo "Job index: ${{ strategy.job-index }}"

Explanation:

job-index is the zero-based index (starting from 0) of the current matrix job.

Useful to identify which position in the matrix this job represents.

üìå With this matrix:

matrix:
  os: [ubuntu-latest, macos-latest]
  node: [14, 16]

You have 4 combinations:

ubuntu-latest + node 14

ubuntu-latest + node 16

macos-latest + node 14

macos-latest + node 16

‚û°Ô∏è Each will have strategy.job-index values: 0, 1, 2, and 3.

| Scenario                                    | Why use `job-index`                     |
| ------------------------------------------- | --------------------------------------- |
| Name or tag outputs uniquely                | Avoid overwriting artifacts/logs        |
| Conditionally run steps only in 1 or N jobs | Run setup in job 0, cleanup in last job |
| Divide responsibilities by index            | Load balance scripts or parallel chunks |


----------------------

üîπ echo "Total jobs: ${{ strategy.job-total }}"

Explanation:

strategy.job-total shows the total number of matrix jobs being run.

It‚Äôs calculated by multiplying the number of values in each axis of the matrix:

üìå In this matrix:

2 os values √ó 2 node versions = 4 total jobs

‚û°Ô∏è All 4 jobs will print:

Total jobs: 4

| Scenario                                     | Why use `job-total`              |
| -------------------------------------------- | -------------------------------- |
| Run cleanup or summary logic **in last job** | Ensures logic only executes once |
| Log matrix coverage                          | Helpful in large test grids      |
| Dynamically adjust load balancing            | Use total to control behavior    |


----------------------
üîπ echo "Max parallel: ${{ strategy.max-parallel }}"

Explanation:

max-parallel is an optional setting you can define in your matrix strategy to limit how many jobs run at the same time.

If not explicitly set, GitHub will try to run all matrix jobs in parallel (depending on available concurrency and your account limits).

üìå If you added:

strategy:
  max-parallel: 2

Only 2 jobs will run at once even though 4 exist.

‚ö†Ô∏è If max-parallel is not defined, it may return empty or the default max GitHub allows.

üß™ Sample Output (Assume Ubuntu + Node 14 is job 0)

Fail-fast: true
Job index: 0
Total jobs: 4
Max parallel:

If you added max-parallel: 2, the last line would output:

Max parallel: 2

| Scenario                           | Why use `max-parallel`     |
| ---------------------------------- | -------------------------- |
| Limited self-hosted runner pool    | Avoid overwhelming runners |
| Expensive tests or builds          | Reduce resource spikes     |
| Rate-limited external dependencies | Prevent API overloading    |
