1. 🔧 What is a Matrix?

A matrix lets you define variables with multiple values so GitHub automatically creates parallel jobs for each combination (cartesian product). It massively streamlines testing across OS versions, language versions, browsers, etc. 

Basic Example

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14, 16]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm test

This yields 3 OS × 2 Node versions = 6 jobs, all in parallel. 

------------

2. 🧠 Key Parameters in strategy.matrix

matrix: Defines variable sets to combine.

exclude: Removes specific unwanted combos.

include: Adds custom combos not covered by base matrix.

max‑parallel: Limits how many run concurrently.

fail‑fast: Default true—stops matrix if a job fails. Set to false to let all run. 

------------

Example with exclude, include, max-parallel, fail-fast:

strategy:
  fail-fast: false
  max-parallel: 5
  matrix:
    os: [ubuntu-latest, windows-latest, macos-latest]
    version: [12, 14, 16]
    browser: [chrome, firefox, safari]
    exclude:
      - os: windows-latest
        browser: safari
    include:
      - os: windows-latest
        browser: edge
        version: 18
Here:

exclude skips incompatible OS-browser pairs.

include supplements a custom Win+Edge+v18 combo.

max-parallel throttles concurrent runs.

fail-fast disabled so full feedback is generated. 

-----------

3. 🎛 include & exclude in Depth

exclude: Prevents running undesirable combos. Even partial match excludes.

include: Can Add new jobs beyond base combos. Extend existing combos with extra variables. Apply only to matching base combos. 

Detailed example from official docs:

strategy:
  matrix:
    fruit: [apple, pear]
    animal: [cat, dog]
    include:
      - color: green
      - color: pink
        animal: cat
      - fruit: apple
        shape: circle
      - fruit: banana
      - fruit: banana
        animal: cat

This carefully constructs combos using official include logic. 

-----------

4. ⚙️ Advanced Matrix Use Cases

A. Single-dimension matrix

When only testing versions:

matrix:
  version: [10,12,14]
Creates one job per version. 

B. Dynamic matrix from previous job outputs

jobs:
  gen-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - id: set
        run: |
          echo 'matrix={"include":[{"os":"ubuntu-latest","node":"20"}]}' >> "$GITHUB_OUTPUT"

  test:
    needs: gen-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.gen-matrix.outputs.matrix) }}
    steps:
      - run: echo "Node ${{ matrix.node }}"

C. Using Strategy Context

You can access:

strategy.job-index: zero-based index of each job.

strategy.job-total: total number of jobs.

strategy.max-parallel etc. 

--------

5. ✅ Best Practices

Use fail-fast: false when you need full results matrix. 

Limit concurrency with max-parallel to manage resources. 

Use exclude to skip incompatible combos early.

Use include to add edge-case combos.

Prefer dynamic matrices if combos depend on runtime contexts.

Cap matrix size to ≤ 256 jobs. 

-----------

| Feature          | Purpose                                             |
| ---------------- | --------------------------------------------------- |
| matrix           | Define variables & their sets for job combinations  |
| exclude          | Skip invalid/unwanted combos                        |
| include          | Add custom combos or override parts of combos       |
| max-parallel     | Control concurrency                                 |
| fail-fast        | Determine whether to halt matrix on first failure   |
| dynamic matrix   | Generate matrix values based on earlier job outputs |
| strategy context | Use job-index, total, etc in run-time steps         |


---------
---------

🚫 Part 1: Problems & Use Cases Without include

The matrix keyword in GitHub Actions creates jobs by taking all combinations of the values you provide. However, it has limitations when you want to:

--------
--------

🔹 Problem 1: Add a combination that isn't part of the cartesian product

Scenario: Suppose you want to test:

Node.js 16 on Ubuntu

Node.js 18 on Ubuntu

Node.js 20 only on Windows

Without include, you’d need to list every combination manually, or you'd get:

Node.js 20 also on Ubuntu and Mac (which you don't want).

❌ Without include:

strategy:
  matrix:
    os: [ubuntu-latest, windows-latest]
    node: [16, 18, 20]

⛔ Output (auto-generated jobs):

ubuntu + 16 ✅
ubuntu + 18 ✅
ubuntu + 20 ❌ (not wanted!)
windows + 16 ✅
windows + 18 ✅
windows + 20 ✅

-----------

🛑 Problem: You get ubuntu+20, which you don’t want, and no way to add custom jobs like Mac+14 if needed.

🔹 Problem 2: Adding extra metadata for a specific combo

Sometimes you want to run a specific job with extra configuration—like a flag, label, or secret—based on a combo. Without include, you can’t inject custom data.

❌ Without include:

matrix:
  os: [ubuntu-latest]
  node: [16, 18]

You cannot do:

- name: Deploy to prod
  if: ${{ matrix.node == 18 && matrix.env == 'prod' }}

Because matrix.env doesn't exist.

-----------

🔹 Problem 3: Only one value in one axis

If you only want:

Ubuntu+16

Windows+18

You can’t express asymmetric combinations using only matrix.

-----------

🔹 Problem 4: You can’t dynamically inject additional matrix keys

Let’s say you want:

Linux+Python3.8+label=“legacy”

Linux+Python3.11+label=“modern”

You can’t add label without include.

-----------------

✅ Part 2: How include Solves These Problems

The include keyword lets you manually add specific combinations, or extend existing ones with more variables.

-----------
🔹 Problem 1: Add Custom Combo (Fixed)

Let’s fix the unwanted ubuntu+20:

strategy:
  matrix:
    os: [ubuntu-latest]
    node: [16, 18]
    include:
      - os: windows-latest
        node: 20

✅ Output (jobs created):

ubuntu + 16 ✅
ubuntu + 18 ✅
windows + 20 ✅ (added manually!)

Now you only run desired combos, avoiding ubuntu+20.

--------

🔹 Problem 2: Add Metadata

strategy:
  matrix:
    os: [ubuntu-latest]
    node: [16, 18]
    include:
      - os: ubuntu-latest
        node: 18
        environment: prod
Step:

- run: echo "Env: ${{ matrix.environment }}"

✅ Output:

Job 1: node=16 ➜ Env: (nothing)
Job 2: node=18 ➜ Env: prod ✅
You can now inject matrix.environment only for node=18 jobs.

-----

🔹 Problem 3: Asymmetric Pairs

strategy:
  matrix:
    include:
      - os: ubuntu-latest
        node: 14
      - os: windows-latest
        node: 16
      - os: macos-latest
        node: 18

✅ This avoids any cartesian product — you control every job manually.

---------

🔹 Problem 4: Add More Keys (like tags, flags)

strategy:
  matrix:
    include:
      - os: ubuntu-latest
        python: 3.8
        label: legacy
      - os: ubuntu-latest
        python: 3.11
        label: modern

Now you can use ${{ matrix.label }} to determine behavior in your steps.

- run: echo "Running ${{ matrix.label }} tests"

✅ Output:

Running legacy tests
Running modern tests

Summary

| Problem Without `include`                   | How `include` Helps                                             |
| ------------------------------------------- | --------------------------------------------------------------- |
| Extra combinations outside cartesian matrix | Add those exact combos manually                                 |
| Need extra fields like env/flag             | Inject arbitrary matrix fields (`env`, `label`, etc.)           |
| Want asymmetric matrix                      | Avoid `matrix.os` × `matrix.node`, use include instead          |
| Need conditional behavior                   | Add fields to trigger logic (`if: ${{ matrix.env == 'prod' }}`) |



---------------------
----------------------

🔴 Step 1: Problems When We Don’t Use exclude

Let’s identify the real-world problems you might face if you don't use exclude, along with examples.

----------

🔹 Problem 1: Invalid or Incompatible Combinations

Example:

You want to test these combinations:

Python on Ubuntu

PowerShell on Windows

But your matrix is defined like this:

matrix:
  os: [ubuntu-latest, windows-latest]
  lang: [python, powershell]

❌ Output Without exclude:

It creates 4 combinations:

ubuntu + python      ✅
ubuntu + powershell  ❌ (PowerShell might fail here)
windows + python     ✅
windows + powershell ✅

🚨 ubuntu + powershell is invalid or unnecessary — it wastes resources or causes build failures.

-------------
🔹 Problem 2: Redundant Jobs

Sometimes the full cartesian product is not needed.

Example: 

You want: Ubuntu with Node.js 14, 16

Windows only with Node.js 18

But a full matrix gives:

ubuntu + 14 ✅
ubuntu + 16 ✅
ubuntu + 18 ❌ (redundant)
windows + 14 ❌ (unwanted)
windows + 16 ❌ (unwanted)
windows + 18 ✅

Without exclude, you can’t stop these extras unless you rewrite everything.

---------

🔹 Problem 3: Adding a Custom Combination with include Isn’t Enough

Even if you add your desired combo using include, you still need exclude to remove the undesired ones from the base matrix.

---------

🧠 How exclude Works Internally

It matches against the generated matrix from the base matrix (before include).

Only full key matches are removed.

exclude does not affect manually added combos in include.

---------

✅ Best Practices with exclude

| ✅ **Tip**                                                     | 💡 **Why**                                                                                    |
| ------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |
| Use it when using a **base matrix** to remove invalid combos  | Helps eliminate OS/tool/version pairs that are logically or technically incompatible          |
| Pair with `include` to build **perfect sets** of jobs         | Lets you define custom combos (`include`) and remove unwanted auto-generated ones (`exclude`) |
| Don't use it alone if you’re defining **only include combos** | If you only use `include`, the base matrix isn’t used—so `exclude` won’t do anything          |
| Be careful — `exclude` works on **exact matches** only        | Partial matches won’t work — all key-value pairs must match to be excluded successfully       |
