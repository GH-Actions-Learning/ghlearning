github_actions_variables:
  variable_types_and_scopes:
    - name: Environment Variables
      description: Set in the environment, available to all steps in a job
      scope: Job-level

    - name: Context Variables
      description: Built-in variables, dynamic values like github, env, job
      scope: Workflow

    - name: Secrets
      description: Encrypted variables for sensitive data
      scope: Repository / Org

    - name: Workflow / Job Outputs
      description: Variables set from one step or job to be used in another
      scope: Workflow-level

    - name: Custom Variables
      description: Defined using env or set-output, not built-in
      scope: Workflow or job

  scope_comparisons:
    - scope: Step
      visibility: Visible only inside a particular step
      example: env in a single run step

    - scope: Job
      visibility: Accessible by all steps within a job
      example: env set at job level

    - scope: Workflow
      visibility: Accessible across all jobs
      example: env set at workflow level

    - scope: Reusable Workflow Inputs
      visibility: Passed into reusable workflows
      example: Via with:

    - scope: Secrets/Org
      visibility: Shared across workflows in an organization or repo
      example: Set in GitHub UI or CLI


| Type                     | Description                                                    | Scope            |
| ------------------------ | -------------------------------------------------------------- | ---------------- |
| `Environment Variables`  | Set in the environment, available to all steps in a job        | Job-level        |
| `Context Variables`      | Built-in variables, dynamic values like `github`, `env`, `job` | Workflow         |
| `Secrets`                | Encrypted variables for sensitive data                         | Repository / Org |
| `Workflow / Job Outputs` | Variables set from one step or job to be used in another       | Workflow-level   |
| `Custom Variables`       | Defined using `env` or `set-output`, not built-in              | Workflow or job  |


| Scope Type                   | Description                                        | Example                      |
| ---------------------------- | -------------------------------------------------- | ---------------------------- |
| **Step**                     | Visible only inside a particular step              | `env` in a single `run` step |
| **Job**                      | Accessible by all steps within a job               | `env` set at job level       |
| **Workflow**                 | Accessible across all jobs                         | `env` set at workflow level  |
| **Reusable Workflow Inputs** | Passed into reusable workflows                     | Via `with:`                  |
| **Secrets/Org**              | Shared across workflows in an organization or repo | Set in GitHub UI or CLI      |



      | Aspect                  | `$NAME1` / `$VAR`                    | `${{ env.NAME1 }}`                                          |
| ----------------------- | ------------------------------------ | ----------------------------------------------------------- |
| **Used in**             | Inside shell commands (bash, sh)     | Used in YAML-level GitHub Actions expressions               |
| **Evaluated by**        | The shell (`bash`, `sh`)             | GitHub Actions expression engine                            |
| **When it's evaluated** | At **runtime**, during the job step  | At **workflow parsing time**, before execution              |
| **Context**             | Only works inside `run:` blocks      | Can be used in `run:`, `env:`, `name:`, etc.                |
| **Example output**      | `$NAME1` will print the actual value | `${{ env.NAME1 }}` becomes the value *before* shell sees it |
| **Quotes required?**    | Often yes, for safety (`"$VAR"`)     | Always inside `${{ }}` syntax                               |



| Context Name              | Description                                                   | Access Syntax                              | Scope                  | Example                                                                         |
| ------------------------- | ------------------------------------------------------------- | ------------------------------------------ | ---------------------- | ------------------------------------------------------------------------------- |
| `github`                  | Metadata about the workflow, repo, event, actor, commit, etc. | `${{ github.ref_name }}`                   | Global                 | `echo "Branch: ${{ github.ref_name }}"`                                         |
| `env`                     | Environment variables defined in the workflow, job, or step   | `${{ env.MY_VAR }}`                        | Workflow, Job, or Step | `env: MY_VAR: "value"` then use `${{ env.MY_VAR }}`                             |
| `secrets`                 | Encrypted secrets from repository/organization                | `${{ secrets.MY_SECRET }}`                 | Workflow, Job, Step    | `echo "${{ secrets.API_KEY }}"`                                                 |
| `runner`                  | Information about the GitHub-hosted/self-hosted runner        | `${{ runner.os }}`                         | Job, Step              | `echo "OS: ${{ runner.os }}"`                                                   |
| `job`                     | Information about the current job (status, container, etc.)   | `${{ job.status }}`                        | Job                    | `if: ${{ job.status == 'success' }}`                                            |
| `steps`                   | Outputs from steps in the same job                            | `${{ steps.step_id.outputs.output_name }}` | Step                   | Define step with `id: build` → access via `${{ steps.build.outputs.artifact }}` |
| `matrix`                  | Current matrix value (when using matrix strategy)             | `${{ matrix.node-version }}`               | Job                    | `strategy: matrix: node-version: [14, 16]`                                      |
| `needs`                   | Outputs and status from previous jobs this job depends on     | `${{ needs.job_id.outputs.output_name }}`  | Job                    | `echo ${{ needs.test.outputs.coverage }}`                                       |
| `inputs`                  | Parameters passed to reusable workflows via `workflow_call`   | `${{ inputs.param_name }}`                 | Workflow (Reusable)    | In caller: `with: name: John` → In called: `${{ inputs.name }}`                 |
| `vars`                    | Repository or org-level custom configuration variables        | `${{ vars.MY_VAR }}`                       | Global                 | `echo "URL: ${{ vars.BASE_URL }}"`                                              |
| `github.event`            | Full webhook payload from the triggering event                | `${{ github.event.head_commit.message }}`  | Global                 | Access PR body: `${{ github.event.pull_request.body }}`                         |
| `strategy`                | Context for strategy matrix execution                         | `${{ strategy.job-index }}`                | Matrix Jobs            | `echo "Matrix job #${{ strategy.job-index }}"`                                  |
| `cancelled()`             | Special function context for conditional logic                | `if: cancelled()`                          | Conditional logic      | `if: cancelled()` runs if workflow was canceled                                 |
| `success()` / `failure()` | Logical status checks                                         | `if: success()`                            | Conditional logic      | `if: success()` runs only if previous steps/jobs succeeded                      |
| `always()`                | Always executes regardless of prior failure                   | `if: always()`                             | Step / Job             | Used for cleanup steps                                                          |
