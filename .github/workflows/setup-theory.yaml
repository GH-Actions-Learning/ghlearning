✅ 1. What are setup-* Actions?

They are official GitHub Actions maintained by the GitHub team to:

Install language runtimes (Node.js, Python, Java, Go, etc.)

Make sure your job has the correct version

Use tool caching to speed up subsequent runs

Work on both GitHub-hosted and self-hosted runners

📦 Examples:

    - uses: actions/setup-node@v4
    - uses: actions/setup-python@v5
    - uses: actions/setup-java@v4

---
🔍 2. How Do They Work Internally?

Internally, these actions follow this common pattern:

🔹 Step-by-Step Process:

1. Check Toolcache (local cache in /opt/hostedtoolcache or runner equivalent):

2. GitHub-hosted runners already cache popular versions

3. Self-hosted runners cache persist across jobs (if persistent)

Resolve Version:

1. Accepts semantic versions (20, 20.x, >=18) or exact pin (20.11.1)

2. Uses a version manifest file from GitHub's CDN

Download if Needed:

1. Downloads binary tarballs from the official source (e.g., Node.js from nodejs.org)

2. Extracts and installs them to the GitHub Actions toolcache

Add to PATH:

1. Modifies PATH environment variable using core.addPath()

2. Also sets NODE_VERSION, PYTHON_VERSION, etc.

(Optional) Enable Caching:

Can enable caching for:

1. node_modules (for Node)

2. pip cache (for Python)

3. Maven/Gradle (for Java)

---
🔧 3. Key Parameters You Can Use

Each setup action has its own inputs. Here are common and powerful ones:

🟦 actions/setup-node

- uses: actions/setup-node@v4
  with:
    node-version: '20.11.1'   # or '20', '>=18.0.0'
    cache: 'npm'              # npm / yarn / pnpm
    check-latest: true        # Always get latest patch/minor

🟨 actions/setup-python

- uses: actions/setup-python@v5
  with:
    python-version: '3.11'
    cache: 'pip'              # pip / pipenv / poetry

🟥 actions/setup-java

- uses: actions/setup-java@v4
  with:
    distribution: 'temurin'   # temurin, zulu, adopt, oracle, etc.
    java-version: '21'
    cache: 'maven'            # maven / gradle


---
⚙️ 4. Caching (How it Actually Works)

-

Toolcache (language binaries)

1. Path: /opt/hostedtoolcache (on GitHub-hosted runners)

2. Persistent on GitHub-hosted runners between workflows

3. Shared across jobs on self-hosted runners if runner is persistent

-

Package Cache

Setup actions support build tool caching:

1. Node: npm, yarn, pnpm

2. Python: pip, poetry, etc.

3. Java: maven, gradle

This uses GitHub Actions built-in cache mechanism behind the scenes:

- uses: actions/cache@v4

It caches directories like:

~/.npm

~/.cache/pip

~/.m2 (Maven)

~/.gradle

---
🧪 6. Limitations & Gotchas

| Limitation                                       | Workaround                                 |
| ------------------------------------------------ | ------------------------------------------ |
| ❌ No system packages (e.g., `ffmpeg`, `libpq`)   | Use `container:` or install manually       |
| ❌ Slower on first run                            | Enable cache or use pre-installed tools    |
| ⚠️ Inconsistent on some self-hosted runners      | Ensure `/opt/hostedtoolcache` is writable  |
| ❌ Won’t match your exact Docker prod environment | Use `container:` if parity is critical     |
| ❌ Tool versions may be removed from manifest     | Pin exact version and cache it in your org |

