| Type                              | Scope                                 | Example                                                     |
| --------------------------------- | ------------------------------------- | ----------------------------------------------------------- |
| **Default environment variables** | Built-in by GitHub                    | `GITHUB_REPOSITORY`, `GITHUB_WORKFLOW`                      |
| **Context variables**             | Read-only values from the context     | `github.actor`, `github.event_name`                         |
| **Environment variables (env)**   | Set by user in jobs or steps          | `env: NODE_ENV: production`                                 |
| **Secrets**                       | Encrypted values (secure)             | `secrets.API_KEY`                                           |
| **Workflow variables**            | User-defined, reusable                | `vars.PROJECT_NAME` (via repository/organization variables) |
| **Job/Step outputs**              | Values passed between steps/jobs      | `steps.step_id.outputs.output_name`                         |
| **Inputs**                        | Used in reusable workflows or actions | `inputs.environment`                                        |


| Scope Type                   | Description                                        | Example                      |
| ---------------------------- | -------------------------------------------------- | ---------------------------- |
| **Step**                     | Visible only inside a particular step              | `env` in a single `run` step |
| **Job**                      | Accessible by all steps within a job               | `env` set at job level       |
| **Workflow**                 | Accessible across all jobs                         | `env` set at workflow level  |
| **Reusable Workflow Inputs** | Passed into reusable workflows                     | Via `with:`                  |
| **Secrets/Org**              | Shared across workflows in an organization or repo | Set in GitHub UI or CLI      |



      | Aspect                  | `$NAME1` / `$VAR`                    | `${{ env.NAME1 }}`                                          |
| ----------------------- | ------------------------------------ | ----------------------------------------------------------- |
| **Used in**             | Inside shell commands (bash, sh)     | Used in YAML-level GitHub Actions expressions               |
| **Evaluated by**        | The shell (`bash`, `sh`)             | GitHub Actions expression engine                            |
| **When it's evaluated** | At **runtime**, during the job step  | At **workflow parsing time**, before execution              |
| **Context**             | Only works inside `run:` blocks      | Can be used in `run:`, `env:`, `name:`, etc.                |
| **Example output**      | `$NAME1` will print the actual value | `${{ env.NAME1 }}` becomes the value *before* shell sees it |
| **Quotes required?**    | Often yes, for safety (`"$VAR"`)     | Always inside `${{ }}` syntax                               |



| Context Name              | Description                                                   | Access Syntax                              | Scope                  | Example                                                                         |
| ------------------------- | ------------------------------------------------------------- | ------------------------------------------ | ---------------------- | ------------------------------------------------------------------------------- |
| `github`                  | Metadata about the workflow, repo, event, actor, commit, etc. | `${{ github.ref_name }}`                   | Global                 | `echo "Branch: ${{ github.ref_name }}"`                                         |
| `env`                     | Environment variables defined in the workflow, job, or step   | `${{ env.MY_VAR }}`                        | Workflow, Job, or Step | `env: MY_VAR: "value"` then use `${{ env.MY_VAR }}`                             |
| `secrets`                 | Encrypted secrets from repository/organization                | `${{ secrets.MY_SECRET }}`                 | Workflow, Job, Step    | `echo "${{ secrets.API_KEY }}"`                                                 |
| `runner`                  | Information about the GitHub-hosted/self-hosted runner        | `${{ runner.os }}`                         | Job, Step              | `echo "OS: ${{ runner.os }}"`                                                   |
| `job`                     | Information about the current job (status, container, etc.)   | `${{ job.status }}`                        | Job                    | `if: ${{ job.status == 'success' }}`                                            |
| `steps`                   | Outputs from steps in the same job                            | `${{ steps.step_id.outputs.output_name }}` | Step                   | Define step with `id: build` ‚Üí access via `${{ steps.build.outputs.artifact }}` |
| `matrix`                  | Current matrix value (when using matrix strategy)             | `${{ matrix.node-version }}`               | Job                    | `strategy: matrix: node-version: [14, 16]`                                      |
| `needs`                   | Outputs and status from previous jobs this job depends on     | `${{ needs.job_id.outputs.output_name }}`  | Job                    | `echo ${{ needs.test.outputs.coverage }}`                                       |
| `inputs`                  | Parameters passed to reusable workflows via `workflow_call`   | `${{ inputs.param_name }}`                 | Workflow (Reusable)    | In caller: `with: name: John` ‚Üí In called: `${{ inputs.name }}`                 |
| `vars`                    | Repository or org-level custom configuration variables        | `${{ vars.MY_VAR }}`                       | Global                 | `echo "URL: ${{ vars.BASE_URL }}"`                                              |
| `github.event`            | Full webhook payload from the triggering event                | `${{ github.event.head_commit.message }}`  | Global                 | Access PR body: `${{ github.event.pull_request.body }}`                         |
| `strategy`                | Context for strategy matrix execution                         | `${{ strategy.job-index }}`                | Matrix Jobs            | `echo "Matrix job #${{ strategy.job-index }}"`                                  |
| `cancelled()`             | Special function context for conditional logic                | `if: cancelled()`                          | Conditional logic      | `if: cancelled()` runs if workflow was canceled                                 |
| `success()` / `failure()` | Logical status checks                                         | `if: success()`                            | Conditional logic      | `if: success()` runs only if previous steps/jobs succeeded                      |
| `always()`                | Always executes regardless of prior failure                   | `if: always()`                             | Step / Job             | Used for cleanup steps                                                          |


| Variable Type                                | Access in Shell (e.g., `run:`) | Access in Expressions (e.g., `env:`/`if:`/`with:`) |
| -------------------------------------------- | ------------------------------ | -------------------------------------------------- |
| `env` (environment vars)                     | ‚úÖ `$VAR_NAME` (shell syntax)   | ‚úÖ `${{ env.VAR_NAME }}`                            |
| `context` (like `github.*`, `steps.*`, etc.) | ‚ùå `$github.ref` ‚Äî invalid      | ‚úÖ `${{ github.ref }}`                              |


So the real reason is:

Environment variables are native to the shell, but GitHub context variables (like github.*) are not‚Äîthey only exist in GitHub Actions' expression engine (${{ }} blocks).

üìò Deep Explanation

üîπ 1. env Variables ‚Üí Shell-native

When you define:

env:
  MY_VAR: hello

GitHub passes MY_VAR=hello into the shell environment.

So inside a run: block:

- run: echo $MY_VAR

This works because the shell (like Bash or PowerShell) knows how to read environment variables using $MY_VAR.

You can also access it in expressions like:

- run: echo "${{ env.MY_VAR }}"

Both are valid, because:

Shell: uses $MY_VAR

GitHub Expressions: use ${{ env.MY_VAR }}

üîπ 2. github.*, steps.*, runner.*, etc. ‚Üí Expression-only Context Variables
These are not part of the shell environment.

GitHub creates them during expression evaluation time, not shell execution. They only exist inside ${{ }} blocks.

Example:

- run: echo "Actor: ${{ github.actor }}"

This works ‚úÖ

But:

- run: echo "Actor: $github.actor"

This fails ‚ùå because Bash tries to find an environment variable called github.actor, which doesn't exist.

üß™ Illustration of Evaluation Timeline

GitHub evaluates workflow -> parses all ${{ }} expressions -> replaces values -> sends result to shell

Shell executes `run:` with resolved values -> reads $MY_VAR if needed
So only environment variables survive into the shell. Contexts don‚Äôt.

üîç Real Example

env:
  MY_VAR: hello

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Use env and context
        run: |
          echo "ENV (shell): $MY_VAR"
          echo "ENV (expression): ${{ env.MY_VAR }}"
          echo "GITHUB ACTOR: ${{ github.actor }}"
          echo "FAILS: $github.actor"  # ‚ùå This will NOT work


-----------------------------------
difference betweeen $VAR1 and ${{env.VAR1}}
-----------------------------------

‚úÖ Your Statement (Refined & Corrected)
Even though VAR_NAME is defined as an env var, when you use ${{ env.VAR_NAME }}, the value is evaluated by GitHub Actions during workflow parsing (pre-runtime).

But when you use $VAR_NAME, the value is resolved later by the shell (like bash) after the workflow has been sent to the runner machine.

‚úÖ That is correct and accurate when stated this way.

üî¨ Let‚Äôs Break This Down:
üîπ ${{ env.VAR_NAME }}
‚úÖ Evaluated by GitHub Actions before shell execution.

Happens at workflow expression evaluation time.

Can be used anywhere GitHub supports expressions (env:, if:, with:, run:, etc.).

Use when you want GitHub to resolve the variable before the script runs.

üîç Example:

env:
  MY_VAR: hello

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ env.MY_VAR }}"

‚û°Ô∏è GitHub replaces ${{ env.MY_VAR }} with hello before the runner executes the job.

üîπ $VAR_NAME

‚úÖ Evaluated by the shell inside the runner (e.g., Bash on Ubuntu, PowerShell on Windows).

Used inside run: shell scripts.

Works only for environment variables already passed to the shell.

GitHub Actions injects your env: values into the shell environment, and then the runner accesses them via $VAR_NAME.

üîç Example:

env:
  MY_VAR: hello

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "$MY_VAR"

‚û°Ô∏è GitHub passes MY_VAR=hello into the shell, and $MY_VAR is evaluated at runtime by the Bash shell.

üß† Visual Timeline


[1] GitHub compiles YAML file
       ‚á® Evaluates all ${{ expressions }} (including env context)

[2] Workflow sent to runner (hosted VM)
       ‚á® Runner sets env vars in shell

[3] Shell executes steps
       ‚á® $VAR_NAME is evaluated by bash/pwsh

üß™ Confirm With Example

env:
  VAR1: one

jobs:
  demo:
    runs-on: ubuntu-latest
    steps:
      - name: Use both
        run: |
          echo "Expression evaluated: ${{ env.VAR1 }}"
          echo "Shell evaluated: $VAR1"

‚úÖ Output will be:

Expression evaluated: one
Shell evaluated: one
But the timing of how each was resolved is different.

‚ö†Ô∏è When This Matters
There are edge cases where you must use one over the other:

Scenario	Use
You want to use env in a name:, if:, or with:	${{ env.VAR_NAME }}
You‚Äôre in a shell script (run:)	$VAR_NAME
You want string interpolation before runtime	${{ env.* }}

‚úÖ Final Answer (Reworded for Precision)
Yes ‚Äî you're absolutely right:

**${{ env.VAR_NAME }}** is evaluated by GitHub Actions before the job runs, during the workflow parsing phase.

**$VAR_NAME** is evaluated by the shell (like Bash or PowerShell) during the runner execution phase.

That timing difference is key to mastering GitHub Actions.