📌 1. What is a GitHub Release?

A GitHub Release is a versioned snapshot of your source code tied to a Git tag. It’s typically used to:

1. Mark stable versions of the software

2. Attach changelogs

3. Distribute release artifacts (e.g., binaries, zip files)

4. Trigger production deployments in CI/CD

---

🧱 2. Core Components of a Release

| Component        | Description                                          |
| ---------------- | ---------------------------------------------------- |
| **Tag Name**     | Git reference for the release (e.g., `v1.0.0`)       |
| **Release Name** | Human-readable title (e.g., “Login System Overhaul”) |
| **Description**  | Release notes, changelog, known issues, links        |
| **Assets**       | Optional downloadable files (e.g., .exe, .zip, .jar) |
| **Pre-release**  | Optional flag to mark beta/alpha/RC builds           |
| **Draft**        | Incomplete release not yet published                 |

---
🔁 3. CI/CD Placement: Where Does "Release" Fit?

📁 First, clarify the two parts of CI/CD:

| Stage  | Meaning                                                        |
| ------ | -------------------------------------------------------------- |
| **CI** | Continuous Integration — build, test, verify                   |
| **CD** | Continuous Delivery (or Deployment) — package, release, deploy |

| Action                         | CI or CD? | Stage                                    |
| ------------------------------ | --------- | ---------------------------------------- |
| Building code                  | ✅ CI      | Early stage                              |
| Running tests                  | ✅ CI      | After build                              |
| Packaging artifacts            | ✅ CI      | End of CI                                |
| Storing artifacts              | ✅ CI/CD   | Depends on design                        |
| Creating Git Tag               | ✅ CI/CD   | Post-Validation, Pre-Release             |
| 📌 **Creating GitHub Release** | ✅ CD      | **End of CD (after staging validation)** |
| Deploying to production        | ✅ CD      | Triggered by release or tag              |

---

✅ Ideal Flow with GitHub Releases:

1. Commit pushed to main
2. Build pipeline runs (CI)
3. Unit + integration tests run (CI)
4. Binary is packaged (CI)
5. Artifact is stored in Artifactory (CI/CD)
6. Deployed to staging (CD)
7. Automated or manual validation in staging (CD)
8. ✅ Release created (GitHub tag + changelog + assets)
9. ✅ Production deployment triggered (CD)

---
🔐 Why Put Release in CD (Not CI)?

1) CI should fail fast and stay fast — it verifies code correctness.

2) CD handles production readiness, promotion, approvals, and distribution.

3) Releases are tied to approval, traceability, and compliance — not fast feedback.

--------------------------------------------------
📌 Release = "Point of Truth" for:

i) Stable, production-ready versions

ii) Linking artifacts, source, and changelogs

iii) Triggering downstream workflows (e.g., deployments)

---
🧪 4. Testing & Validation Strategy

All tests MUST happen before release

✅ Unit tests

✅ Integration tests

✅ UAT or staging validation

Releases should only be created after successful test pass

Optionally follow release with post-deploy smoke tests

---
🎓 Types of Releases

| Type           | Description                                   |
| -------------- | --------------------------------------------- |
| ✅ Final        | Official version (e.g., `v1.0.0`)             |
| ⚠️ Pre-release | Unstable version (e.g., `v2.0.0-beta`)        |
| 📝 Draft       | Saved but unpublished release                 |
| 🚫 Deprecated  | Old or unsupported versions (manually marked) |

---
🏗️ Manual vs Automated Releases

| Approach      | Description                                        |
| ------------- | -------------------------------------------------- |
| **Manual**    | Done through GitHub UI                             |
| **Automated** | Done through GitHub Actions workflow (recommended) |

---

📦 5. Difference Between Release & Artifact Storage

| Feature            | GitHub Release                         | Artifact Repository (e.g., Artifactory)            |
| ------------------ | -------------------------------------- | -------------------------------------------------- |
| **Purpose**        | Tag & document a stable version        | Store and version build artifacts                  |
| **What is stored** | Source snapshot, release notes, assets | Compiled binaries, images, packages                |
| **Access**         | Manual download or API                 | Programmatic via package managers (npm, pip, etc.) |
| **Used for**       | Human consumption & tagging            | Automated deployment or dependency tracking        |

-------------------------------------
📘 What is Semantic Versioning?

Semantic Versioning (SemVer) is a standardized version numbering system that communicates the nature of changes in your software using a 3-part version format:

MAJOR.MINOR.PATCH

Example: v2.5.1

------------

🧩 What Do the Numbers Mean?

| Segment   | Purpose                                   | Example Trigger                              |
| --------- | ----------------------------------------- | -------------------------------------------- |
| **MAJOR** | Breaking changes – backward incompatible  | API redesign, removing fields or methods     |
| **MINOR** | New features – backward compatible        | Adding a new API endpoint, feature, CLI flag |
| **PATCH** | Bug fixes – no breaking change or feature | Fixing a crash, typo, or logic error         |

------------
📦 Example

| Version | Description                                    |
| ------- | ---------------------------------------------- |
| `1.0.0` | First stable release                           |
| `1.1.0` | Adds new features (no breaking change)         |
| `1.1.1` | Fixes a small bug                              |
| `2.0.0` | Introduces breaking changes (e.g., API revamp) |


-----------
⚠️ Pre-release Versions

In Semantic Versioning, a pre-release version is a version that is not yet stable or final, but is available for testing or early feedback

These versions help identify builds that are:

1) In development

2) Unstable

3) Intended for testing only

4) Not ready for production deployment

---
🧩 Format of Pre-release Versions (SemVer)

Pre-releases use a hyphen (-) and a label after the standard version:

MAJOR.MINOR.PATCH-<label>

✅ Examples:

| Version           | Meaning                                      |
| ----------------- | -------------------------------------------- |
| `1.0.0-alpha`     | First alpha version — early development      |
| `1.0.0-beta`      | Feature-complete, may have bugs              |
| `1.0.0-rc.1`      | First Release Candidate (stable, test-ready) |
| `2.1.0-preview.2` | Preview version 2 for 2.1.0                  |
| `1.2.3-dev`       | Development-only version                     |

---------
🔄 Ordering of Pre-release Versions

Semantic Versioning defines rules for how pre-release versions are sorted and compared

Example order:

1.0.0-alpha
1.0.0-alpha.1
1.0.0-beta
1.0.0-beta.2
1.0.0-rc.1
1.0.0         ✅ final release (stable)

---
💡 When Do You Use Pre-release Versions?

| Scenario                                  | Pre-release Label            |
| ----------------------------------------- | ---------------------------- |
| Internal testing builds                   | `-alpha`, `-dev`, `-nightly` |
| External beta test                        | `-beta`                      |
| Release candidate (feature complete)      | `-rc`                        |
| Public preview with limited functionality | `-preview`                   |

----
🧠 Why Use Pre-releases?

| Benefit                                   | Explanation                                          |
| ----------------------------------------- | ---------------------------------------------------- |
| ✅ Safe testing in production-like systems | Test upcoming features before general availability   |
| ✅ Feedback loop                           | Let testers or power users try early builds          |
| ✅ Controlled rollout                      | Avoid pushing unstable code as the main release      |
| ✅ Version isolation                       | Avoid polluting production environments              |
| ✅ Automation-friendly                     | Pre-release builds can trigger selective deployments |


-----------

Types of release trigger

# ┌────────────────────────────────────────────────────────────┐
# │ 🔔 Trigger this workflow on GitHub release events          │
# └────────────────────────────────────────────────────────────┘

# on:
#   release:
#     types:
#       - published      # ✅ A release is published
#       - created        # 🆕 A release is created (including drafts)
#       - edited         # ✏️  A release is edited
#       - deleted        # ❌ A release is deleted
#       - prereleased    # 🚧 A release is marked as a prerelease
#       - unpublished    # 🔙 A release is unpublished (turned back into a draft)

----------

🧱 Core Building Blocks for Automated Releases

| Task                          | Tool/Action                            | Description                       |
| ----------------------------- | -------------------------------------- | --------------------------------- |
| Create Git tag                | `git tag` or GitHub Action             | Marks versioned commit            |
| Create release                | `actions/create-release`               | Creates the actual GitHub release |
| Upload assets (binaries, zip) | `actions/upload-release-asset`         | Attaches files to the release     |
| Trigger workflow              | `workflow_dispatch`, `push`, `release` | Determines how the release starts |

🔁 Typical Release Workflow (Automated)

1. Developer pushes code or triggers workflow manually
2. Workflow builds, tests, and packages the app
3. A Git tag is created (e.g., v1.0.0)
4. GitHub Release is created with changelog
5. Binaries are attached to the release
6. Deployment is optionally triggered

--------------
🧠 Other Trigger Options

| Trigger              | Use case                                 |
| -------------------- | ---------------------------------------- |
| `workflow_dispatch`  | Manual releases, version input           |
| `push: tags: ['v*']` | Auto-releases when version tag is pushed |
| `release` event      | Trigger follow-up workflows post-release |
| `schedule`           | Nightly pre-releases                     |
| `pull_request`       | Pre-release builds before merging        |


