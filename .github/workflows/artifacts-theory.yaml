üîπ 1. FUNDAMENTALS OF GITHUB ACTIONS ARTIFACTS

‚úÖ What is an Artifact?

In GitHub Actions, an artifact is a file or group of files that are:

Generated during a workflow run

Stored temporarily by GitHub

Downloadable after the run finishes

Shareable between jobs in the same workflow

You can think of artifacts as "outputs" of a job that you want to preserve or reuse.

‚úÖ Why Do We Use Artifacts?

| Purpose                     | Description                             | Example                            |
| --------------------------- | --------------------------------------- | ---------------------------------- |
| **Build results**           | Share compiled code, zipped releases    | Upload `.dll`, `.jar`, or `.zip`   |
| **Test logs**               | Store test logs, screenshots, results   | Upload `test-results.xml`, `logs/` |
| **Inter-job communication** | Pass files between jobs                 | Job A builds, Job B tests          |
| **Debugging**               | Retain logs, state files for inspection | Upload `logs/error.log`            |
| **Deployment**              | Package files and deploy in later jobs  | Push `.zip` to Azure App Service   |


‚úÖ Where Are Artifacts Stored?

Artifacts are:

Stored on GitHub‚Äôs servers

Available under the ‚ÄúActions‚Äù tab for each workflow run

Downloadable manually

Retained for up to 90 days (configurable)

You can also download artifacts using the GitHub CLI, curl, or APIs.


‚úÖ Lifecycle of an Artifact

1. Created

You generate files during a job (e.g., build/ folder)

2. Uploaded

Use actions/upload-artifact to upload files

3. Stored

GitHub stores the files compressed as .zip

4. Downloaded

Use actions/download-artifact to access them in another job or after the run

5. Expires

Artifacts expire after X days unless retained externally

‚úÖ How Are Artifacts Different From Other GitHub Actions Concepts?

| Concept               | Scope            | Purpose                 | Persistence             |
| --------------------- | ---------------- | ----------------------- | ----------------------- |
| **Artifacts**         | Workflow         | Share files             | Temporary (max 90 days) |
| **Outputs**           | Job/Step         | Share strings/variables | Transient               |
| **Cache**             | Across workflows | Speed up dependencies   | Stored via keys         |
| **Environment files** | Same job         | Pass vars between steps | Short-lived             |


‚úÖ Key Limits and Constraints

| Limit                        | Value                                     |
| ---------------------------- | ----------------------------------------- |
| Max file size (per artifact) | 5 GB                                      |
| Max total per workflow run   | 100 GB                                    |
| Retention period             | Default: 90 days, Min: 1 day              |
| Max artifacts per repo       | No hard limit, but storage caps apply     |
| Upload/download speed        | Affected by file size and ZIP compression |


‚úÖ Common Tools Involved

| Tool                        | Purpose                           |
| --------------------------- | --------------------------------- |
| `actions/upload-artifact`   | Uploads artifacts                 |
| `actions/download-artifact` | Downloads artifacts               |
| `gh run download`           | CLI command to get artifacts      |
| GitHub Web UI               | View/download artifacts           |
| GitHub REST API             | Access artifacts programmatically |


‚úÖ Where Artifacts Fit in DevOps Pipelines (AZ-400 Relevance)

| Azure DevOps Concept   | GitHub Equivalent          |
| ---------------------- | -------------------------- |
| Build Artifacts        | GitHub Action Artifacts    |
| Publish Artifact task  | `upload-artifact` action   |
| Download Artifact task | `download-artifact` action |
| Retention policies     | `retention-days` in GitHub |


---------------------------------------

üîç Deep Dive on Each Parameter in Upload Artifacts

----------------------------------------

1. name

Logical identifier.

Used later in download-artifact

with:
  name: frontend-build

--------------

2. path

Can be a file, folder, or glob pattern.

You can include multiple paths like:

with:
  path: |
    output/app.dll
    logs/*

----------

3. if-no-files-found

Controls behavior when no files match path

| Value    | Behavior            |
| -------- | ------------------- |
| `warn`   | Warns but continues |
| `error`  | Fails the job       |
| `ignore` | Silently continues  |

----------

4. retention-days

Number of days the artifact is retained.

Max: 90, Default: 90 (or repo default)

with:
  retention-days: 14

üî∏ What is retention-days?

retention-days specifies how long GitHub should store your uploaded artifact before it is automatically deleted.

This helps:

Control storage usage

Comply with compliance/data lifecycle rules

Prevent bloating your repository's artifacts section

üî∏ Valid Range

| Setting | Value                                        |
| ------- | -------------------------------------------- |
| Minimum | `1` day                                      |
| Maximum | `90` days (for public and private repos)     |
| Default | `90` days unless the repo admin overrides it |


-------------

5. compression-level

ZIP compression level (0 = none, 9 = max)

Default is 6 (good balance)

with:
  compression-level: 9

‚úÖ What is compression-level?

The compression-level parameter defines how much compression is applied when GitHub zips your artifact before uploading it.

This affects:

Upload size (smaller files = faster uploads)

CPU usage (higher compression = more CPU)

Speed (higher compression = slower process)

‚úÖ Valid Values

| Value | Description      | Notes                               |
| ----- | ---------------- | ----------------------------------- |
| `0`   | No compression   | Fastest upload, largest size        |
| `1-5` | Low compression  | Balanced for speed and size         |
| `6`   | Default          | Good balance                        |
| `7-9` | High compression | Smallest files, slowest to compress |

‚úÖ When to Use Higher or Lower Compression

| Scenario                                              | Suggested Level |
| ----------------------------------------------------- | --------------- |
| Speed is more important than size                     | `1‚Äì3`           |
| You‚Äôre uploading huge files (e.g. logs, binaries)     | `7‚Äì9`           |
| Files are already compressed (`.zip`, `.jpg`, `.mp4`) | `0` or `1`      |
| Default use case (general purpose)                    | `6`             |


-----------------

üîÅ What Happens When You Run This Multiple Times?

Each run will:

Write test1.txt with the message:

This is run 1
This is run 2
...

Upload it as an artifact named example-artifact

üîç Result in GitHub UI

| Run # | Artifact Name      | Contents inside test1.txt |
| ----- | ------------------ | ------------------------- |
| 1     | `example-artifact` | `This is run 1`           |
| 2     | `example-artifact` | `This is run 2`           |
| 3     | `example-artifact` | `This is run 3`           |


Even though the artifact name is the same, each run's artifact is separate and isolated.

‚úÖ Key Takeaways

| Behavior                   | Explanation                                     |
| -------------------------- | ----------------------------------------------- |
| Same name across runs      | ‚úÖ Allowed ‚Äî GitHub tracks them per run          |
| Same name in one run       | ‚ùå Error ‚Äî duplicate name not allowed in one run |
| Files change across runs   | ‚úÖ Stored independently                          |
| View/download old versions | ‚úÖ Yes ‚Äî per run from the Actions tab            |


‚úÖ Alternative Unique Naming Options for Upload Artifacts

| Method     | Syntax                     | Output Example        |
| ---------- | -------------------------- | --------------------- |
| Run number | `${{ github.run_number }}` | `artifact-run-12`     |
| Short SHA  | `${{ github.sha }}`        | `artifact-a3c2f9e`    |
| Timestamp  | `$(date +%s)` (in script)  | `artifact-1725362671` |
